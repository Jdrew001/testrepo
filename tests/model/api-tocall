import { ApiToCall } from '../path/to/api-to-call';
import { Method } from '../path/to/api-to-call';
import { MappingInstruction } from '../../utils/http-request-helpers/mapping-instruction';
import { Transformer } from '../../utils/http-request-helpers/transform';

describe('ApiToCall', () => {
  describe('constructor', () => {
    it('should correctly initialize properties from constructor input', () => {
      const mockItem = {
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.GET,
        params: [new MappingInstruction()],
        module: 'test-module',
        requestType: 'REFERENCE',
        jsonAdapter: ['adapter1', 'adapter2'],
        options: { body: { test: 'body' }, params: { test: 'params' }, headers: { test: 'headers' } }
      };

      const apiToCall = new ApiToCall(mockItem);

      expect(apiToCall.key).toBe(mockItem.key);
      expect(apiToCall.context).toBe(mockItem.context);
      expect(apiToCall.endpoint).toBe(mockItem.endpoint);
      expect(apiToCall.method).toBe(mockItem.method);
      expect(apiToCall.module).toBe(mockItem.module);
      expect(apiToCall.requestType).toBe(mockItem.requestType);
      expect(apiToCall.jsonAdapter).toEqual(mockItem.jsonAdapter);
      expect(apiToCall.options).toEqual({ body: null, params: null, headers: null });
    });

    it('should set default values when not provided in constructor', () => {
      const mockItem = {
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.GET
      };

      const apiToCall = new ApiToCall(mockItem as any);

      expect(apiToCall.key).toBe(mockItem.key);
      expect(apiToCall.options).toEqual({ body: null, params: null, headers: null });
      expect(apiToCall.jsonAdapter).toEqual([]);
    });
  });

  describe('buildRequest', () => {
    it('should call buildBody when method is POST', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.POST
      });
      spyOn(apiToCall, 'buildBody').and.returnValue(apiToCall);
      const testData = { test: 'data' };

      const result = apiToCall.buildRequest(testData);

      expect(apiToCall.buildBody).toHaveBeenCalledWith(testData);
      expect(result).toBe(apiToCall);
    });

    it('should call buildGetRequest when method is not POST', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.GET
      });
      spyOn(apiToCall, 'buildGetRequest').and.returnValue(apiToCall);
      const testData = { test: 'data' };

      const result = apiToCall.buildRequest(testData);

      expect(apiToCall.buildGetRequest).toHaveBeenCalledWith(testData);
      expect(result).toBe(apiToCall);
    });
  });

  describe('buildBody', () => {
    it('should set body in options and return this', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.POST,
        module: 'test-module',
        params: [new MappingInstruction()]
      });
      spyOn<any>(apiToCall, 'getRequestBody').and.returnValue(new Map([['key1', 'value1']]));
      const testData = { test: 'data' };

      const result = apiToCall.buildBody(testData);

      expect(apiToCall['getRequestBody']).toHaveBeenCalledWith(testData, apiToCall.module, apiToCall.params);
      expect(apiToCall.options.body).toEqual({ key1: 'value1' });
      expect(result).toBe(apiToCall);
    });
  });

  describe('buildGetRequest', () => {
    it('should update options with params and return this', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.GET
      });
      const testParams = { param1: 'value1', param2: 'value2' };

      const result = apiToCall.buildGetRequest(testParams);

      expect(apiToCall.options.params).toEqual(testParams);
      expect(result).toBe(apiToCall);
    });
  });

  describe('buildHeaders', () => {
    it('should update options with headers and return this', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.GET
      });
      const testHeaders = ['Content-Type: application/json', 'Authorization: Bearer token'];

      const result = apiToCall.buildHeaders(testHeaders);

      expect(apiToCall.options.headers).toEqual(testHeaders);
      expect(result).toBe(apiToCall);
    });
  });

  describe('getRequestBody', () => {
    it('should transform data according to mapping instructions', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.POST
      });
      
      const rawData = { 
        sourceField1: 'value1',
        sourceField2: 'value2' 
      };
      
      const mappingInstructions = [
        { mapFrom: 'sourceField1', mapTo: 'targetField1', dataType: 'string' },
        { mapFrom: 'sourceField2', mapTo: 'targetField2', dataType: 'string' }
      ];
      
      spyOn(Transformer, 'transform')
        .and.returnValues('transformed1', 'transformed2');
      
      const result = apiToCall['getRequestBody'](rawData, 'test-module', mappingInstructions);
      
      expect(result instanceof Map).toBe(true);
      expect(result.get('targetField1')).toBe('transformed1');
      expect(result.get('targetField2')).toBe('transformed2');
    });

    it('should handle errors during transformation', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.POST
      });
      
      const rawData = { 
        sourceField1: 'value1'
      };
      
      const mappingInstructions = [
        { mapFrom: 'sourceField1', mapTo: 'targetField1', dataType: 'string' }
      ];
      
      spyOn(Transformer, 'transform').and.throwError('Test error');
      spyOn(console, 'error');
      
      const result = apiToCall['getRequestBody'](rawData, 'test-module', mappingInstructions);
      
      expect(result instanceof Map).toBe(true);
      expect(result.size).toBe(0);
      expect(console.error).toHaveBeenCalled();
      expect((console.error as jasmine.Spy).calls.first().args[0]).toContain('ERROR INSIDE {getRequestBody}:');
    });
  });

  describe('findClosestKey', () => {
    it('should find the closest key within threshold', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.GET
      });
      
      const obj = {
        'apple': 'value1',
        'banana': 'value2',
        'applesauce': 'value3'
      };
      
      spyOn<any>(apiToCall, 'levenshteinDistance').and.callFake((a, b) => {
        if (a === 'aple' && b === 'apple') return 1;
        if (a === 'aple' && b === 'banana') return 5;
        if (a === 'aple' && b === 'applesauce') return 6;
        return 999;
      });
      
      const result = apiToCall['findClosestKey']('aple', obj, 2);
      
      expect(result).toBe('apple');
    });

    it('should return undefined when no key is within threshold', () => {
      const apiToCall = new ApiToCall({
        key: 'test-key',
        context: 'test-context',
        endpoint: 'test-endpoint',
        method: Method.GET
      });
      
      const obj = {
        'apple': 'value1',
        'banana': 'value2',
        'cherry': 'value3'
      };
      
      spyOn<any>(apiToCall, 'levenshteinDistance').and.returnValue(10);
      
      const result = apiToCall['findClosestKey']('xyz', obj, 2);
      
      expect(result).toBeUndefined();
    });
  });
});