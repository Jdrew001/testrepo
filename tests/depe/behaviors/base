// base.behavior.spec.ts
import { TestBed } from '@angular/core/testing';
import { BehaviorBase } from './base.behavior';
import { DependencyAdapterFactoryService } from '../services/dependency-adapter-factory.service';
import { CommonReferenceService } from '../services/reference/common-reference.service';
import { IGenericStrategyInterface } from '../strategies/field-strategies/generic-strategy.interface';

// Create a concrete class that extends the abstract BehaviorBase
class TestBehavior extends BehaviorBase {
  apply(field: IGenericStrategyInterface, dep: any, data: any, behavior?: any): void {
    // Implementation for testing
  }
}

describe('BehaviorBase', () => {
  let behavior: TestBehavior;
  let dataAdapterFactoryMock: jasmine.SpyObj<DependencyAdapterFactoryService>;
  let commonReferenceServiceMock: jasmine.SpyObj<CommonReferenceService>;

  beforeEach(() => {
    dataAdapterFactoryMock = jasmine.createSpyObj('DependencyAdapterFactoryService', ['getAdapterByKey']);
    commonReferenceServiceMock = jasmine.createSpyObj('CommonReferenceService', ['getReference']);

    TestBed.configureTestingModule({
      providers: [
        TestBehavior,
        { provide: DependencyAdapterFactoryService, useValue: dataAdapterFactoryMock },
        { provide: CommonReferenceService, useValue: commonReferenceServiceMock }
      ]
    });

    behavior = TestBed.inject(TestBehavior);
  });

  it('should be created', () => {
    expect(behavior).toBeTruthy();
  });

  it('should have injected dependencies', () => {
    expect(behavior['dataAdapterI']).toBe(dataAdapterFactoryMock);
    expect(behavior['commonReferenceServiceI']).toBe(commonReferenceServiceMock);
  });
});