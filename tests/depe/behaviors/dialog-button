// dialog-button-confirm.behavior.spec.ts
import { TestBed } from '@angular/core/testing';
import { DialogButtonConfirmBehavior } from './dialog-button-confirm.behavior';
import { DependencyAdapterFactoryService } from '../services/dependency-adapter-factory.service';
import { CommonReferenceService } from '../services/reference/common-reference.service';
import { IGenericStrategyInterface } from '../strategies/field-strategies/generic-strategy.interface';
import { DependencyConfig } from '../model/configs/dependency.config';
import { DialogButtonConfirmConfig } from '../model/configs/dependency-custom-attributes/dialog-button-confirm.config';

describe('DialogButtonConfirmBehavior', () => {
  let behavior: DialogButtonConfirmBehavior;
  let dataAdapterFactoryMock: jasmine.SpyObj<DependencyAdapterFactoryService>;
  let commonReferenceServiceMock: jasmine.SpyObj<CommonReferenceService>;

  beforeEach(() => {
    dataAdapterFactoryMock = jasmine.createSpyObj('DependencyAdapterFactoryService', ['getAdapterByKey']);
    commonReferenceServiceMock = jasmine.createSpyObj('CommonReferenceService', ['getReference']);

    TestBed.configureTestingModule({
      providers: [
        DialogButtonConfirmBehavior,
        { provide: DependencyAdapterFactoryService, useValue: dataAdapterFactoryMock },
        { provide: CommonReferenceService, useValue: commonReferenceServiceMock }
      ]
    });

    behavior = TestBed.inject(DialogButtonConfirmBehavior);
  });

  it('should be created', () => {
    expect(behavior).toBeTruthy();
  });

  it('should emit field control value when dialog confirm data exists', () => {
    // Create mock field
    const mockControl = jasmine.createSpyObj('AbstractControl', ['setValue']);
    const mockComponent = {
      outClick: jasmine.createSpyObj('EventEmitter', ['emit'])
    };
    const mockField = {
      control: mockControl,
      component: mockComponent,
      formGroup: jasmine.createSpyObj('FormGroup', ['get'])
    } as any as IGenericStrategyInterface;

    // Create mock dependency config
    const mockDep = {
      customAttributes: {
        dialogConfirmData: { value: 'confirmValue' }
      }
    } as any as DependencyConfig<DialogButtonConfirmConfig>;

    // Call the apply method
    behavior.apply(mockField, mockDep, {}, {});

    // Verify that emit was called with the correct value
    expect(mockComponent.outClick.emit).toHaveBeenCalledWith('confirmValue');
  });

  it('should emit null when dialog confirm data does not exist', () => {
    // Create mock field
    const mockControl = jasmine.createSpyObj('AbstractControl', ['setValue']);
    const mockComponent = {
      outClick: jasmine.createSpyObj('EventEmitter', ['emit'])
    };
    const mockField = {
      control: mockControl,
      component: mockComponent,
      formGroup: jasmine.createSpyObj('FormGroup', ['get'])
    } as any as IGenericStrategyInterface;

    // Create mock dependency config without dialog confirm data
    const mockDep = {
      customAttributes: {}
    } as any as DependencyConfig<DialogButtonConfirmConfig>;

    // Call the apply method
    behavior.apply(mockField, mockDep, {}, {});

    // Verify that emit was called with null
    expect(mockComponent.outClick.emit).toHaveBeenCalledWith(null);
  });
});