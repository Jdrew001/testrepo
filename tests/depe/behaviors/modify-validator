// modify-validator.behavior.spec.ts
import { TestBed } from '@angular/core/testing';
import { ModifyValidatorBehavior } from './modify-validator.behavior';
import { ValidatorRegistryService } from '../services/form/validator-registry.service';
import { DependencyAdapterFactoryService } from '../services/dependency-adapter-factory.service';
import { CommonReferenceService } from '../services/reference/common-reference.service';
import { IGenericStrategyInterface } from '../strategies/field-strategies/generic-strategy.interface';
import { DependencyConfig } from '../model/configs/dependency.config';
import { ModifyValueCustomAttributes } from '../model/configs/dependency-custom-attributes/modify-value-custom-attributes.config';

describe('ModifyValidatorBehavior', () => {
  let behavior: ModifyValidatorBehavior;
  let validatorServiceMock: jasmine.SpyObj<ValidatorRegistryService>;
  let dataAdapterFactoryMock: jasmine.SpyObj<DependencyAdapterFactoryService>;
  let commonReferenceServiceMock: jasmine.SpyObj<CommonReferenceService>;

  beforeEach(() => {
    validatorServiceMock = jasmine.createSpyObj('ValidatorRegistryService', ['getValidators']);
    dataAdapterFactoryMock = jasmine.createSpyObj('DependencyAdapterFactoryService', ['getAdapterByKey']);
    commonReferenceServiceMock = jasmine.createSpyObj('CommonReferenceService', ['getReference']);

    TestBed.configureTestingModule({
      providers: [
        ModifyValidatorBehavior,
        { provide: ValidatorRegistryService, useValue: validatorServiceMock },
        { provide: DependencyAdapterFactoryService, useValue: dataAdapterFactoryMock },
        { provide: CommonReferenceService, useValue: commonReferenceServiceMock }
      ]
    });

    behavior = TestBed.inject(ModifyValidatorBehavior);
  });

  it('should be created', () => {
    expect(behavior).toBeTruthy();
  });

  it('should apply validators when they exist', () => {
    // Create mock validators
    const mockValidators = [{ name: 'required' }];
    validatorServiceMock.getValidators.and.returnValue(mockValidators);

    // Create mock form group with get method
    const mockFormGroup = jasmine.createSpyObj('FormGroup', ['get', 'setValidators', 'updateValueAndValidity']);
    const mockControl = jasmine.createSpyObj('AbstractControl', ['setValidators', 'updateValueAndValidity']);
    mockFormGroup.get.and.returnValue(mockControl);

    // Create mock field
    const mockField = {
      id: 'testField',
      formGroup: mockFormGroup,
      updateValueAndValidity: jasmine.createSpy('updateValueAndValidity')
    } as any as IGenericStrategyInterface;

    // Create mock dependency config with validators
    const mockDep = {
      customAttributes: {
        validators: ['required']
      }
    } as any as DependencyConfig<ModifyValueCustomAttributes>;

    // Call the apply method
    behavior.apply(mockField, mockDep, {}, {});

    // Verify that validators were applied
    expect(mockField.updateValueAndValidity).toHaveBeenCalled();
  });

  it('should do nothing when no validators exist', () => {
    // Create mock form group
    const mockFormGroup = jasmine.createSpyObj('FormGroup', ['get']);
    
    // Create mock field
    const mockField = {
      id: 'testField',
      formGroup: mockFormGroup,
      updateValueAndValidity: jasmine.createSpy('updateValueAndValidity')
    } as any as IGenericStrategyInterface;

    // Create mock dependency config without validators
    const mockDep = {
      customAttributes: {}
    } as any as DependencyConfig<ModifyValueCustomAttributes>;

    // Call the apply method
    behavior.apply(mockField, mockDep, {}, {});

    // Verify that nothing happened
    expect(mockField.updateValueAndValidity).not.toHaveBeenCalled();
  });
});