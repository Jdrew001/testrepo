// reset-value.behavior.spec.ts
import { TestBed } from '@angular/core/testing';
import { ResetValueBehavior } from './reset-value.behavior';
import { DependencyAdapterFactoryService } from '../services/dependency-adapter-factory.service';
import { CommonReferenceService } from '../services/reference/common-reference.service';
import { IGenericStrategyInterface } from '../strategies/field-strategies/generic-strategy.interface';
import { DependencyConfig } from '../model/configs/dependency.config';
import { ModifyValueCustomAttributes } from '../model/configs/dependency-custom-attributes/modify-value-custom-attributes.config';

describe('ResetValueBehavior', () => {
  let behavior: ResetValueBehavior;
  let dataAdapterFactoryMock: jasmine.SpyObj<DependencyAdapterFactoryService>;
  let commonReferenceServiceMock: jasmine.SpyObj<CommonReferenceService>;
  let mockDataInitializer: any;

  beforeEach(() => {
    dataAdapterFactoryMock = jasmine.createSpyObj('DependencyAdapterFactoryService', ['getAdapterByKey']);
    commonReferenceServiceMock = jasmine.createSpyObj('CommonReferenceService', ['getReference']);
    mockDataInitializer = jasmine.createSpyObj('DataInitializer', ['updateData']);

    TestBed.configureTestingModule({
      providers: [
        ResetValueBehavior,
        { provide: DependencyAdapterFactoryService, useValue: dataAdapterFactoryMock },
        { provide: CommonReferenceService, useValue: commonReferenceServiceMock }
      ]
    });

    behavior = TestBed.inject(ResetValueBehavior);
    (behavior as any).dataInitializer = mockDataInitializer;
  });

  it('should be created', () => {
    expect(behavior).toBeTruthy();
  });

  it('should reset field value', () => {
    // Create mock field
    const mockField = {
      id: 'testField'
    } as any as IGenericStrategyInterface;

    // Create mock dependency config
    const mockDep = {} as DependencyConfig<ModifyValueCustomAttributes>;

    // Call the apply method
    behavior.apply(mockField, mockDep, {}, {});

    // Verify that field value was reset
    expect(mockDataInitializer.updateData).toHaveBeenCalledWith(
      { fieldId: 'testField', data: [] }, 
      mockField
    );
  });
});