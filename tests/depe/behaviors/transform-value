// transform-value.behavior.spec.ts
import { TestBed } from '@angular/core/testing';
import { TransformValueBehavior } from './transform-modify-value.behavior';
import { CommonHttpService } from '../services/utility/common-http.service';
import { DependencyAdapterFactoryService } from '../services/dependency-adapter-factory.service';
import { CommonReferenceService } from '../services/reference/common-reference.service';
import { IGenericStrategyInterface } from '../strategies/field-strategies/generic-strategy.interface';
import { DependencyConfig } from '../model/configs/dependency.config';
import { ModifyValueCustomAttributes } from '../model/configs/dependency-custom-attributes/modify-value-custom-attributes.config';
import { AbstractJsonMapper } from '../interfaces/abstract-jsonmapper';

describe('TransformValueBehavior', () => {
  let behavior: TransformValueBehavior;
  let httpServiceMock: jasmine.SpyObj<CommonHttpService>;
  let dataAdapterFactoryMock: jasmine.SpyObj<DependencyAdapterFactoryService>;
  let commonReferenceServiceMock: jasmine.SpyObj<CommonReferenceService>;
  let mockDataInitializer: any;

  beforeEach(() => {
    httpServiceMock = jasmine.createSpyObj('CommonHttpService', ['request']);
    dataAdapterFactoryMock = jasmine.createSpyObj('DependencyAdapterFactoryService', ['getAdapterByKey']);
    commonReferenceServiceMock = jasmine.createSpyObj('CommonReferenceService', ['getReference']);
    mockDataInitializer = jasmine.createSpyObj('DataInitializer', ['updateData']);

    TestBed.configureTestingModule({
      providers: [
        TransformValueBehavior,
        { provide: CommonHttpService, useValue: httpServiceMock },
        { provide: DependencyAdapterFactoryService, useValue: dataAdapterFactoryMock },
        { provide: CommonReferenceService, useValue: commonReferenceServiceMock }
      ]
    });

    behavior = TestBed.inject(TransformValueBehavior);
    (behavior as any).dataInitializer = mockDataInitializer;
  });

  it('should be created', () => {
    expect(behavior).toBeTruthy();
  });

  it('should transform data using jsonAdapters', () => {
    // Create mock adapter
    const mockAdapter = {
      transform: jasmine.createSpy('transform').and.returnValue('transformedData')
    } as any as AbstractJsonMapper;
    dataAdapterFactoryMock.getAdapterByKey.and.returnValue(mockAdapter);

    // Create mock field
    const mockField = {
      id: 'testField'
    } as any as IGenericStrategyInterface;

    // Create mock dependency config with JSON adapters
    const mockDep = {
      customAttributes: {
        jsonAdapters: ['adapter1']
      }
    } as any as DependencyConfig<ModifyValueCustomAttributes>;

    // Mock data
    const mockData = { value: 'test' };

    // Call the apply method
    behavior.apply(mockField, mockDep, mockData, {});

    // Verify adapter was retrieved and transform was called
    expect(dataAdapterFactoryMock.getAdapterByKey).toHaveBeenCalledWith('adapter1');
    expect(mockAdapter.transform).toHaveBeenCalledWith(mockData);
  });

  it('should warn when adapter is not found', () => {
    // Setup adapter to return undefined
    dataAdapterFactoryMock.getAdapterByKey.and.returnValue(undefined);

    // Create mock field
    const mockField = {
      id: 'testField'
    } as any as IGenericStrategyInterface;

    // Create mock dependency config with JSON adapters
    const mockDep = {
      customAttributes: {
        jsonAdapters: ['nonExistentAdapter']
      }
    } as any as DependencyConfig<ModifyValueCustomAttributes>;

    // Mock data
    const mockData = { value: 'test' };

    // Spy on console.warn
    spyOn(console, 'warn');

    // Call the apply method
    behavior.apply(mockField, mockDep, mockData, {});

    // Verify warning was logged
    expect(console.warn).toHaveBeenCalledWith(jasmine.stringMatching(/Adapter key .* not found/));
  });

  it('should return original data when no adapters transform it', () => {
    // Create mock field
    const mockField = {
      id: 'testField'
    } as any as IGenericStrategyInterface;

    // Create mock dependency config with empty JSON adapters
    const mockDep = {
      customAttributes: {
        jsonAdapters: []
      }
    } as any as DependencyConfig<ModifyValueCustomAttributes>;

    // Mock data
    const mockData = { value: 'test' };

    // Call the apply method
    behavior.apply(mockField, mockDep, mockData, {});

    // Since transformData is private, we can't directly test its return value
    // But we can verify that dataInitializer.updateData was called with the original data
    expect(mockDataInitializer.updateData).toHaveBeenCalled();
  });
});