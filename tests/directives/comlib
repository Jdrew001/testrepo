import { ComponentFixture, TestBed, fakeAsync, tick, waitForAsync } from '@angular/core/testing';
import { Component, ViewContainerRef, ViewChild, ElementRef, NO_ERRORS_SCHEMA } from '@angular/core';
import { CommonLibRendererDirective } from './common-lib-renderer.directive';
import { CommonRenderService } from '../../services/utility/common-render.service';
import { FieldRegistryService } from '../../services/form/field-registry.service';
import { CommonFormService } from '../../services/form/common-form.service';
import { DependencyHandlerService } from '../../services/dependency/dependency-handler.service';
import { UILibraryConfig } from '../../model/config/ui-library.config';
import { FormGroup } from '@angular/forms';
import { LibraryConfig } from '../../model/configs/library.config';
import { BaseConfig } from '../../model/config/base.config';
import { Subject, of } from 'rxjs';
import { UILibrary } from '../../enums/ui-library.enum';

@Component({
  template: `<div ciaCommonLibRenderer></div>`
})
class TestHostComponent {
  @ViewChild(CommonLibRendererDirective) directive!: CommonLibRendererDirective;
}

describe('CommonLibRendererDirective', () => {
  let component: TestHostComponent;
  let fixture: ComponentFixture<TestHostComponent>;
  let directive: CommonLibRendererDirective;
  let mockLibConfig: LibraryConfig;
  let mockParentForm: FormGroup;
  let mockFormConfig: BaseConfig<any>[];
  let mockVcr: jasmine.SpyObj<ViewContainerRef>;
  let commonRenderServiceSpy: jasmine.SpyObj<CommonRenderService>;
  let mockLibraryConfig: UILibraryConfig;
  let fieldRegistryServiceSpy: jasmine.SpyObj<FieldRegistryService>;
  let commonFormServiceSpy: jasmine.SpyObj<CommonFormService>;
  let dependencyHandlerServiceSpy: jasmine.SpyObj<DependencyHandlerService>;
  
  // Mock implementation for dynamic import
  const mockImport = (path: string) => {
    return Promise.resolve({ 
      CiaCommonUiComponent: {} 
    });
  };
  
  beforeEach(waitForAsync(() => {
    mockLibConfig = { name: 'Test Config' } as LibraryConfig;
    mockParentForm = new FormGroup({});
    mockFormConfig = [
      { field: 'field1' } as BaseConfig<any>,
      { field: 'field2' } as BaseConfig<any>
    ];
    
    mockVcr = jasmine.createSpyObj('ViewContainerRef', ['clear', 'createComponent']);
    
    commonRenderServiceSpy = jasmine.createSpyObj('CommonRenderService', [
      'getComponentByComponentType'
    ]);

    mockLibraryConfig = {
      uiLibrary: UILibrary.NG,
      environment: {}
    } as UILibraryConfig;

    fieldRegistryServiceSpy = jasmine.createSpyObj('FieldRegistryService', ['register']);
    
    commonFormServiceSpy = jasmine.createSpyObj('CommonFormService', ['registerFormElement']);
    
    dependencyHandlerServiceSpy = jasmine.createSpyObj('DependencyHandlerService', ['publishEvent']);

    spyOn(console, 'log');

    // Patch the global import function
    spyOn(window, 'import').and.callFake(mockImport);

    TestBed.configureTestingModule({
      declarations: [
        CommonLibRendererDirective,
        TestHostComponent
      ],
      providers: [
        { provide: ViewContainerRef, useValue: mockVcr },
        { provide: UILibraryConfig, useValue: mockLibraryConfig },
        { provide: CommonRenderService, useValue: commonRenderServiceSpy },
        { provide: FieldRegistryService, useValue: fieldRegistryServiceSpy },
        { provide: CommonFormService, useValue: commonFormServiceSpy },
        { provide: DependencyHandlerService, useValue: dependencyHandlerServiceSpy },
        { provide: ElementRef, useValue: {} }
      ],
      schemas: [NO_ERRORS_SCHEMA]
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(TestHostComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    directive = component.directive;
  });

  afterEach(() => {
    // Add cleanup to prevent test pollution
    fixture.destroy();
  });

  it('should create an instance', () => {
    expect(directive).toBeTruthy();
  });

  describe('Input properties', () => {
    it('should set and get libConfig', () => {
      directive.libConfig = mockLibConfig;
      expect(directive.libConfig).toBe(mockLibConfig);
    });

    it('should set and get parentForm', () => {
      directive.parentForm = mockParentForm;
      expect(directive.parentForm).toBe(mockParentForm);
    });

    it('should set and get formConfig and call renderComponent', () => {
      spyOn(directive, 'renderComponent');
      directive.formConfig = mockFormConfig;
      expect(directive.formConfig).toBe(mockFormConfig);
      expect(directive.renderComponent).toHaveBeenCalled();
    });

    it('should set and get data', () => {
      const testData = { test: 'data' };
      directive.data = testData;
      expect(directive.data).toBe(testData);
    });

    it('should set and get refData', () => {
      const testRefData = { ref: 'data' };
      directive.refData = testRefData;
      expect(directive.refData).toBe(testRefData);
    });
  });

  describe('gridActions EventEmitter', () => {
    it('should initialize gridActions EventEmitter', () => {
      expect(directive.gridActions).toBeTruthy();
    });
  });

  describe('renderComponent', () => {
    it('should import CiaCommonUiComponent and create component', fakeAsync(() => {
      const mockComponentRef = {
        instance: {
          libConfig: undefined,
          parentForm: undefined,
          formConfig: undefined,
          data: undefined,
          refData: undefined,
          outForm: { subscribe: jasmine.createSpy('subscribe') },
          outClick: { subscribe: jasmine.createSpy('subscribe') },
          gridAction: { subscribe: jasmine.createSpy('subscribe') }
        }
      };
      
      mockVcr.createComponent.and.returnValue(mockComponentRef as any);
      
      directive.renderComponent();
      tick();
      
      expect(window.import).toHaveBeenCalled();
      expect(mockVcr.clear).toHaveBeenCalled();
      expect(mockVcr.createComponent).toHaveBeenCalled();
    }));
    
    it('should set component instance properties and subscribe to outputs', fakeAsync(() => {
      // Create mock component with instances
      const mockComponentRef = {
        instance: {
          libConfig: undefined,
          parentForm: undefined,
          formConfig: undefined,
          data: undefined,
          refData: undefined,
          outForm: { subscribe: jasmine.createSpy('subscribe') },
          outClick: { subscribe: jasmine.createSpy('subscribe') },
          gridAction: { subscribe: jasmine.createSpy('subscribe') }
        }
      };
      
      mockVcr.createComponent.and.returnValue(mockComponentRef as any);
      
      // Setup directive properties
      directive.libConfig = mockLibConfig;
      directive.parentForm = mockParentForm;
      directive.formConfig = mockFormConfig;
      directive.data = { test: 'data' };
      directive.refData = { ref: 'data' };
      
      // Setup spies for handleOutputChanges
      spyOn(directive as any, 'handleOutputChanges');
      spyOn(directive.outClicks, 'emit');
      spyOn(directive.gridActions, 'emit');
      
      directive.renderComponent();
      tick();
      
      // Verify inputs set correctly
      expect(mockComponentRef.instance.libConfig).toBe(mockLibConfig);
      expect(mockComponentRef.instance.parentForm).toBe(mockParentForm);
      expect(mockComponentRef.instance.formConfig).toBe(mockFormConfig);
      expect(mockComponentRef.instance.data).toBe(directive.data);
      expect(mockComponentRef.instance.refData).toBe(directive.refData);
      
      // Verify subscriptions
      expect(mockComponentRef.instance.outForm.subscribe).toHaveBeenCalled();
      expect(mockComponentRef.instance.outClick.subscribe).toHaveBeenCalled();
      expect(mockComponentRef.instance.gridAction.subscribe).toHaveBeenCalled();
      
      // Test subscription callbacks
      const outFormCallback = mockComponentRef.instance.outForm.subscribe.calls.mostRecent().args[0];
      const outClickCallback = mockComponentRef.instance.outClick.subscribe.calls.mostRecent().args[0];
      const gridActionCallback = mockComponentRef.instance.gridAction.subscribe.calls.mostRecent().args[0];
      
      // Invoke callbacks
      const testValue = { field: { id: 'testField' }, data: { value: 'testData' } };
      outFormCallback(testValue);
      outClickCallback(testValue);
      gridActionCallback(testValue);
      
      // Verify correct handling
      expect(directive['handleOutputChanges']).toHaveBeenCalledWith(testValue.field, testValue.data);
      expect(directive.outClicks.emit).toHaveBeenCalledWith(testValue);
      expect(directive.gridActions.emit).toHaveBeenCalledWith(testValue);
    }));
  });

  describe('handleInputs', () => {
    it('should set component instance properties', () => {
      const mockComponent = {
        instance: {
          libConfig: undefined,
          parentForm: undefined,
          formConfig: undefined,
          data: undefined,
          refData: undefined
        }
      };
      
      directive.libConfig = mockLibConfig;
      directive.parentForm = mockParentForm;
      directive.formConfig = mockFormConfig;
      directive.data = { test: 'data' };
      directive.refData = { ref: 'data' };
      
      directive['handleInputs'](mockComponent as any);
      
      expect(mockComponent.instance.libConfig).toBe(mockLibConfig);
      expect(mockComponent.instance.parentForm).toBe(mockParentForm);
      expect(mockComponent.instance.formConfig).toBe(mockFormConfig);
      expect(mockComponent.instance.data).toBe(directive.data);
      expect(mockComponent.instance.refData).toBe(directive.refData);
    });
  });

  describe('handleOutputs', () => {
    it('should subscribe to component instance event emitters', () => {
      const mockComponent = {
        instance: {
          outForm: { subscribe: jasmine.createSpy('subscribe') },
          outClick: { subscribe: jasmine.createSpy('subscribe') },
          gridAction: { subscribe: jasmine.createSpy('subscribe') }
        }
      };
      
      directive['handleOutputs'](mockComponent as any);
      
      expect(mockComponent.instance.outForm.subscribe).toHaveBeenCalled();
      expect(mockComponent.instance.outClick.subscribe).toHaveBeenCalled();
      expect(mockComponent.instance.gridAction.subscribe).toHaveBeenCalled();
    });
  });

  describe('handleOutputChanges', () => {
    it('should call updateDependency and emit outForms', () => {
      spyOn(directive as any, 'updateDependency');
      spyOn(directive.outForms, 'emit');
      
      const mockField = { id: 'testField' };
      const mockData = { value: 'testValue' };
      
      directive['handleOutputChanges'](mockField, mockData);
      
      expect(directive['updateDependency']).toHaveBeenCalledWith(mockField, mockData);
      expect(directive.outForms.emit).toHaveBeenCalledWith({ field: mockField, data: mockData });
    });
  });
});