import { Directive, Input, Self, OnInit, OnDestroy, ElementRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AutoComplete } from 'primeng/autocomplete';
import { Subscription } from 'rxjs';

@Directive({
  selector: 'p-autoComplete[returnObject]',
})
export class AutoCompleteObjectValueDirective implements OnInit, OnDestroy {
  @Input() returnObject: boolean = true;
  @Input() objectField: string = '';

  private valueChangesSubscription: Subscription | null = null;
  private isV17: boolean = false;
  private originalSelectFn: ((event: any) => void) | null = null;

  constructor(
    @Self() private autoComplete: AutoComplete,
    @Self() private ngControl: NgControl
  ) {}

  ngOnInit(): void {
    // Detect version - v17 uses signals
    this.isV17 = typeof (this.autoComplete as any)['modelValue'] === 'function';
    
    // For v16, we need to create a hook into the original 'selectItem' method
    if (!this.isV17) {
      this.hookIntoV16SelectItem();
    } else {
      this.hookIntoV17OptionSelect();
    }

    // Subscribe to value changes from the form control
    if (this.ngControl.valueChanges) {
      this.valueChangesSubscription = this.ngControl.valueChanges.subscribe(value => {
        if (this.returnObject && value) {
          // Update the display text when an object is received
          this.updateInputText(value);
        }
      });
    }
  }

  /**
   * Hook into the V16 selectItem method
   */
  private hookIntoV16SelectItem(): void {
    const originalSelectItem = (this.autoComplete as any)['selectItem'];
    if (typeof originalSelectItem === 'function') {
      (this.autoComplete as any)['selectItem'] = (event: any, option: any) => {
        if (this.returnObject) {
          // When returning object, pass the full object as value
          this.ngControl.control?.setValue(option);
          
          // Also update the AutoComplete's value for internal consistency
          (this.autoComplete as any).value = option;
        }
        
        // Call the original method
        originalSelectItem.call(this.autoComplete, event, option);
      };
    }
  }

  /**
   * Hook into the V17 onOptionSelect method
   */
  private hookIntoV17OptionSelect(): void {
    const originalOnOptionSelect = (this.autoComplete as any)['onOptionSelect'];
    if (typeof originalOnOptionSelect === 'function') {
      (this.autoComplete as any)['onOptionSelect'] = (event: any, option: any) => {
        if (this.returnObject) {
          // When returning object, pass the full object as value
          this.ngControl.control?.setValue(option);
        }
        
        // Call the original method
        originalOnOptionSelect.call(this.autoComplete, event, option);
      };
    }
  }

  /**
   * Updates the input field text based on the provided object value
   */
  private updateInputText(value: any): void {
    if (!value) return;
    
    // Get the field to display
    const fieldToUse = this.objectField || this.autoComplete.field || 'label';
    
    if (this.isV17) {
      // In v17, we need to update the input element directly
      const inputEl = this.getInputElement();
      if (inputEl) {
        inputEl.value = this.resolveFieldData(value, fieldToUse);
      }
    } else {
      // In v16, we can update the inputFieldValue and call updateInputField
      (this.autoComplete as any)['inputFieldValue'] = this.resolveFieldData(value, fieldToUse);
      if (typeof (this.autoComplete as any)['updateInputField'] === 'function') {
        (this.autoComplete as any)['updateInputField']();
      }
    }
  }

  /**
   * Gets the input element from either version of the component
   */
  private getInputElement(): HTMLInputElement | null {
    // Try to get the input element reference
    const inputRef = (this.autoComplete as any)['inputEL'] as ElementRef | undefined;
    return inputRef?.nativeElement || null;
  }

  /**
   * Gets value from an object by field name
   */
  private resolveFieldData(object: any, field: string): string {
    if (!object || !field) {
      return '';
    }

    if (field.indexOf('.') === -1) {
      return object[field] !== undefined ? object[field] : '';
    }
    
    const fields = field.split('.');
    let value = object;
    
    for (let i = 0, len = fields.length; i < len; ++i) {
      if (value == null) {
        return '';
      }
      value = value[fields[i]];
    }
    
    return value !== undefined ? value : '';
  }

  ngOnDestroy(): void {
    // Clean up the subscription
    if (this.valueChangesSubscription) {
      this.valueChangesSubscription.unsubscribe();
    }
  }
}