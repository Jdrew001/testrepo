import { Directive, Input, Self, OnInit, OnDestroy, ElementRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AutoComplete } from 'primeng/autocomplete';
import { Subscription } from 'rxjs';

@Directive({
  selector: 'p-autoComplete[returnObject]',
})
export class AutoCompleteObjectValueDirective implements OnInit, OnDestroy {
  @Input() returnObject: boolean = true;
  @Input() objectField: string = '';

  private valueChangesSubscription: Subscription | null = null;
  private isV17: boolean = false;
  private processingSelection: boolean = false;

  constructor(
    @Self() private autoComplete: AutoComplete,
    @Self() private ngControl: NgControl
  ) {}

  ngOnInit(): void {
    // Detect version - v17 uses signals
    this.isV17 = typeof (this.autoComplete as any)['modelValue'] === 'function';
    
    // For v16
    if (!this.isV17) {
      this.hookIntoV16ModelChange();
    } 
    // For v17
    else {
      this.hookIntoV17ModelChange();
    }

    // Subscribe to value changes from the form control
    if (this.ngControl.valueChanges) {
      this.valueChangesSubscription = this.ngControl.valueChanges.subscribe(value => {
        if (this.returnObject && value && !this.processingSelection) {
          // Update the display text when an object is received
          this.updateInputField(value);
        }
      });
    }
  }

  /**
   * Hook into V16's onModelChange method
   */
  private hookIntoV16ModelChange(): void {
    const originalOnModelChange = this.autoComplete.onModelChange;
    
    this.autoComplete.onModelChange = (value: any) => {
      if (this.returnObject) {
        this.processingSelection = true;
        try {
          // Let the original method update the internal state
          originalOnModelChange(value);
          
          // Now update our form control with the object(s) instead of string values
          if (this.autoComplete.multiple) {
            if (Array.isArray(value)) {
              // Process the array to ensure we have original objects
              this.handleMultipleSelection(value);
            }
          } else {
            // For single selection, keep the full object
            this.ngControl.control?.setValue(
              this.getSingleObjectValue(value),
              { emitEvent: false }
            );
          }
        } finally {
          this.processingSelection = false;
        }
      } else {
        // Original behavior for string values
        originalOnModelChange(value);
      }
    };
  }

  /**
   * Hook into V17's onModelChange method
   */
  private hookIntoV17ModelChange(): void {
    const originalOnModelChange = this.autoComplete.onModelChange;
    
    this.autoComplete.onModelChange = (value: any) => {
      if (this.returnObject) {
        this.processingSelection = true;
        try {
          // Let the original method update the internal state
          originalOnModelChange(value);
          
          // Now update our form control with the object(s) instead of string values
          if (this.autoComplete.multiple) {
            if (Array.isArray(value)) {
              // Process the array to ensure we have original objects
              this.handleMultipleSelection(value);
            }
          } else {
            // For single selection, keep the full object
            this.ngControl.control?.setValue(
              this.getSingleObjectValue(value),
              { emitEvent: false }
            );
          }
        } finally {
          this.processingSelection = false;
        }
      } else {
        // Original behavior for string values
        originalOnModelChange(value);
      }
    };
  }
  
  /**
   * Handle multiple selection by ensuring we have objects, not strings
   */
  private handleMultipleSelection(value: any[]): void {
    // Get the suggestions which contain the full objects
    const suggestions = this.getSuggestions();
    if (!suggestions || !suggestions.length) return;
    
    // Map any string values to their corresponding objects
    const objectValues = value.map(item => {
      // If the item is already an object, return it as is
      if (typeof item === 'object' && item !== null) {
        return item;
      }
      
      // If it's a string, find the corresponding object in suggestions
      const stringValue = String(item);
      const fieldToUse = this.autoComplete.field || 'label';
      
      // Find the matching object in suggestions
      const matchingObject = suggestions.find(suggestion => {
        const suggestionValue = this.resolveFieldData(suggestion, fieldToUse);
        return suggestionValue === stringValue;
      });
      
      return matchingObject || item;
    });
    
    // Update the form control with the array of objects
    this.ngControl.control?.setValue(objectValues, { emitEvent: false });
  }
  
  /**
   * Handle single selection by ensuring we have an object, not a string
   */
  private getSingleObjectValue(value: any): any {
    // If value is already an object, return it
    if (typeof value === 'object' && value !== null) {
      return value;
    }
    
    // If it's a string, find the corresponding object
    const suggestions = this.getSuggestions();
    if (!suggestions || !suggestions.length) return value;
    
    const stringValue = String(value);
    const fieldToUse = this.autoComplete.field || 'label';
    
    // Find the matching object
    const matchingObject = suggestions.find(suggestion => {
      const suggestionValue = this.resolveFieldData(suggestion, fieldToUse);
      return suggestionValue === stringValue;
    });
    
    return matchingObject || value;
  }
  
  /**
   * Get current suggestions from the autocomplete component
   */
  private getSuggestions(): any[] {
    if (this.isV17) {
      return (this.autoComplete as any)._suggestions ? 
        (this.autoComplete as any)._suggestions() : [];
    } else {
      return (this.autoComplete as any)._suggestions || [];
    }
  }

  /**
   * Updates the input field display based on the provided value
   */
  private updateInputField(value: any): void {
    if (!value) return;

    // Handle multiple selection mode (array)
    if (this.autoComplete.multiple && Array.isArray(value)) {
      // In multiple mode, the display is handled by PrimeNG's template
      return;
    }
    
    // Handle single selection mode (object)
    const fieldToUse = this.objectField || this.autoComplete.field || 'label';
    
    if (this.isV17) {
      // In v17, we need to update the input element directly
      const inputEl = this.getInputElement();
      if (inputEl) {
        inputEl.value = this.resolveFieldData(value, fieldToUse);
      }
    } else {
      // In v16, we can update the inputFieldValue and call updateInputField
      (this.autoComplete as any)['inputFieldValue'] = this.resolveFieldData(value, fieldToUse);
      if (typeof (this.autoComplete as any)['updateInputField'] === 'function') {
        (this.autoComplete as any)['updateInputField']();
      }
    }
  }

  /**
   * Gets the input element from either version of the component
   */
  private getInputElement(): HTMLInputElement | null {
    // Try to get the input element reference
    const inputRef = (this.autoComplete as any)['inputEL'] as ElementRef | undefined;
    return inputRef?.nativeElement || null;
  }

  /**
   * Gets value from an object by field name
   */
  private resolveFieldData(object: any, field: string): string {
    if (!object || !field) {
      return '';
    }

    if (field.indexOf('.') === -1) {
      return object[field] !== undefined ? object[field] : '';
    }
    
    const fields = field.split('.');
    let value = object;
    
    for (let i = 0, len = fields.length; i < len; ++i) {
      if (value == null) {
        return '';
      }
      value = value[fields[i]];
    }
    
    return value !== undefined ? value : '';
  }

  ngOnDestroy(): void {
    // Clean up the subscription
    if (this.valueChangesSubscription) {
      this.valueChangesSubscription.unsubscribe();
    }
  }
}