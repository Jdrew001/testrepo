/**

- Simple PrimeNG Selection Fix
- 
- Fixes the “select all” issue where disabled checkboxes get selected.
- Just add to your table - no configuration needed!
- 
- Usage:
- <p-table [value]=“items” [(selection)]=“selected” appSelectionFix>
- <!-- your existing table template -->
- </p-table>

*/

import { Directive, Host, OnInit, OnDestroy, AfterViewInit, ElementRef } from ‘@angular/core’;
import { Table } from ‘primeng/table’;

@Directive({
selector: ‘[appSelectionFix]’
})
export class SelectionFixDirective implements OnInit, OnDestroy, AfterViewInit {

private originalMethod: any;
private cleanupTimer: any;

constructor(
@Host() private table: Table,
private element: ElementRef
) {}

ngOnInit() {
// Override the “select all” method
this.originalMethod = this.table.toggleRowsWithCheckbox?.bind(this.table);

```
if (this.table.toggleRowsWithCheckbox) {
  this.table.toggleRowsWithCheckbox = (event: Event, checked: boolean) => {
    if (checked) {
      // When selecting all, only select enabled rows
      this.selectOnlyEnabledRows(event);
    } else {
      // When deselecting, use original method
      this.originalMethod(event, checked);
    }
  };
}
```

}

ngAfterViewInit() {
// Clean up any initially selected disabled items
setTimeout(() => this.cleanupSelection(), 100);
}

ngOnDestroy() {
// Restore original method
if (this.originalMethod) {
this.table.toggleRowsWithCheckbox = this.originalMethod;
}

```
if (this.cleanupTimer) {
  clearTimeout(this.cleanupTimer);
}
```

}

private selectOnlyEnabledRows(event: Event) {
if (!this.table.value) return;

```
// Find all enabled checkboxes
const checkboxes = this.element.nativeElement.querySelectorAll(
  'tbody input[type="checkbox"]'
);

const enabledItems: any[] = [];

checkboxes.forEach((checkbox: HTMLInputElement, index: number) => {
  if (!checkbox.disabled && this.table.value[index]) {
    enabledItems.push(this.table.value[index]);
  }
});

// Update selection
this.table.selection = enabledItems;
this.table.selectionChange.emit(this.table.selection);

// Emit header checkbox event
this.table.onHeaderCheckboxToggle.emit({
  originalEvent: event,
  checked: true
});

// Update PrimeNG internal state
if (this.table.updateSelectionKeys) {
  this.table.updateSelectionKeys();
}
```

}

private cleanupSelection() {
if (!this.table.selection?.length) return;

```
// Get current enabled items
const checkboxes = this.element.nativeElement.querySelectorAll(
  'tbody input[type="checkbox"]'
);

const enabledItems = new Set();
checkboxes.forEach((checkbox: HTMLInputElement, index: number) => {
  if (!checkbox.disabled && this.table.value?.[index]) {
    enabledItems.add(this.table.value[index]);
  }
});

// Filter out any disabled items from selection
const validSelection = this.table.selection.filter(item => enabledItems.has(item));

if (validSelection.length !== this.table.selection.length) {
  this.table.selection = validSelection;
  this.table.selectionChange.emit(this.table.selection);
}
```

}
}

/*
USAGE EXAMPLES:

1. Basic usage (just add the directive):
   <p-table [value]=“users” [(selection)]=“selectedUsers” appSelectionFix>

  <ng-template pTemplate="body" let-user>
    <tr>
      <td>
        <p-tableCheckbox [value]="user" [disabled]="user.inactive"></p-tableCheckbox>
      </td>
      <td>{{user.name}}</td>
    </tr>
  </ng-template>
</p-table>

1. Works with any disabled logic:
   <p-tableCheckbox [value]=“item” [disabled]=“item.status === ‘locked’”></p-tableCheckbox>
1. Module registration:
   @NgModule({
   declarations: [SelectionFixDirective],
   // …
   })
   export class YourModule { }

That’s it! No configuration needed.
*/
