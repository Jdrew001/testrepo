import { Directive, Host, OnInit, OnDestroy, AfterViewInit, ElementRef, Renderer2, NgZone } from '@angular/core';
import { Table } from 'primeng/table';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

@Directive({
  selector: '[appSelectionFix]'
})
export class SelectionFixDirective implements OnInit, OnDestroy, AfterViewInit {
  
  private destroy$ = new Subject<void>();
  private headerCheckboxMonitorInterval?: any;
  private isProcessingHeaderClick = false;
  private originalHeaderClickHandler?: Function;

  constructor(
    @Host() private table: Table,
    private element: ElementRef,
    private renderer: Renderer2,
    private ngZone: NgZone
  ) {}

  ngOnInit() {
    // Monitor selection changes to clean up disabled items
    if (this.table.selectionChange) {
      this.table.selectionChange
        .pipe(takeUntil(this.destroy$))
        .subscribe(() => {
          // Don't update if we're processing a header click
          if (!this.isProcessingHeaderClick) {
            setTimeout(() => {
              this.cleanupDisabledItems();
              this.updateHeaderCheckboxState();
            }, 0);
          }
        });
    }

    // Override PrimeNG's header checkbox behavior
    this.overridePrimeNGHeaderBehavior();
  }

  ngAfterViewInit() {
    // Initial setup
    setTimeout(() => {
      this.setupHeaderCheckbox();
      this.updateHeaderCheckboxState();
      this.uncheckDisabledCheckboxes();
      
      // Start monitoring to keep header enabled
      this.startHeaderMonitoring();
    }, 100);

    // Handle table updates - be careful not to break row selection
    [this.table.onPage, this.table.onSort, this.table.onFilter].forEach(event => {
      if (event) {
        event.pipe(takeUntil(this.destroy$)).subscribe(() => {
          // Wait for PrimeNG to finish updating
          setTimeout(() => {
            this.setupHeaderCheckbox();
            this.updateHeaderCheckboxState();
            this.uncheckDisabledCheckboxes();
          }, 150);
        });
      }
    });

    // Handle lazy loading
    if (this.table.onLazyLoad) {
      this.table.onLazyLoad.pipe(takeUntil(this.destroy$)).subscribe(() => {
        setTimeout(() => {
          this.setupHeaderCheckbox();
          this.updateHeaderCheckboxState();
          this.uncheckDisabledCheckboxes();
        }, 150);
      });
    }
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
    
    // Clean up monitoring
    if (this.headerCheckboxMonitorInterval) {
      clearInterval(this.headerCheckboxMonitorInterval);
    }
  }

  private overridePrimeNGHeaderBehavior() {
    // Override the table's toggleAll method
    const originalToggleAll = (this.table as any).toggleAll;
    if (originalToggleAll) {
      (this.table as any).toggleAll = (event: any) => {
        this.handleCustomToggleAll();
      };
    }

    // Override header checkbox toggle event
    if (this.table.onHeaderCheckboxToggle) {
      this.table.onHeaderCheckboxToggle.emit = (event: any) => {
        this.handleCustomToggleAll();
      };
    }
  }

  private startHeaderMonitoring() {
    // Monitor header checkbox state outside Angular zone for performance
    this.ngZone.runOutsideAngular(() => {
      this.headerCheckboxMonitorInterval = setInterval(() => {
        const headerCheckbox = this.getHeaderCheckbox();
        if (headerCheckbox && headerCheckbox.disabled) {
          this.ngZone.run(() => {
            headerCheckbox.disabled = false;
            this.updateHeaderCheckboxVisualState(headerCheckbox);
          });
        }
      }, 100);
    });
  }

  private setupHeaderCheckbox() {
    const headerCheckbox = this.getHeaderCheckbox();
    if (!headerCheckbox) {
      setTimeout(() => this.setupHeaderCheckbox(), 50);
      return;
    }

    // Ensure it's enabled
    headerCheckbox.disabled = false;
    
    // Remove only the click listener, not the element itself
    const clickListeners = (headerCheckbox as any).__clickListeners;
    if (clickListeners) {
      clickListeners.forEach((listener: EventListener) => {
        headerCheckbox.removeEventListener('click', listener);
      });
    }

    // Find and override the p-tableheadercheckbox component click
    const pTableHeaderCheckbox = headerCheckbox.closest('p-tableheadercheckbox');
    if (pTableHeaderCheckbox) {
      // Override click on the wrapper div that PrimeNG uses
      const checkboxWrapper = pTableHeaderCheckbox.querySelector('.p-checkbox');
      if (checkboxWrapper) {
        // Store original onclick if exists
        const originalOnclick = (checkboxWrapper as any).onclick;
        
        // Replace with our handler
        (checkboxWrapper as any).onclick = (e: Event) => {
          e.preventDefault();
          e.stopPropagation();
          this.isProcessingHeaderClick = true;
          this.handleCustomToggleAll();
          setTimeout(() => {
            this.isProcessingHeaderClick = false;
          }, 100);
        };
      }
    }

    // Also intercept the input checkbox itself
    headerCheckbox.onclick = (e: Event) => {
      e.preventDefault();
      e.stopPropagation();
      this.isProcessingHeaderClick = true;
      this.handleCustomToggleAll();
      setTimeout(() => {
        this.isProcessingHeaderClick = false;
      }, 100);
    };

    this.updateHeaderCheckboxVisualState(headerCheckbox);
  }

  private updateHeaderCheckboxVisualState(headerCheckbox: HTMLInputElement) {
    const pCheckbox = headerCheckbox.closest('.p-checkbox');
    if (pCheckbox) {
      pCheckbox.classList.remove('p-checkbox-disabled', 'p-disabled');
      const box = pCheckbox.querySelector('.p-checkbox-box');
      if (box) {
        box.classList.remove('p-disabled');
      }
    }
  }

  private handleCustomToggleAll() {
    // Check if table has any data
    if (!this.table.value || this.table.value.length === 0) {
      return;
    }

    // Get enabled items
    const enabledItems = this.getEnabledItems();
    if (enabledItems.length === 0) {
      return;
    }
    
    // Count currently selected enabled items
    const selectedEnabledItems = enabledItems.filter(item => this.isItemSelected(item));
    
    // Determine action
    let shouldSelectAll = selectedEnabledItems.length < enabledItems.length;

    // Update selection
    if (shouldSelectAll) {
      this.table.selection = [...enabledItems];
    } else {
      this.table.selection = [];
    }

    // Emit change
    if (this.table.selectionChange) {
      this.table.selectionChange.emit(this.table.selection);
    }

    // Update visual states
    this.updateAllCheckboxStates();
  }

  private updateAllCheckboxStates() {
    // Update body checkboxes
    this.updateBodyCheckboxes();
    
    // Update header after a brief delay
    setTimeout(() => {
      this.updateHeaderCheckboxState();
    }, 20);
  }

  private getEnabledItems(): any[] {
    if (!this.table.value) return [];

    const enabledItems: any[] = [];
    const bodyCheckboxes = this.getBodyCheckboxes();

    if (bodyCheckboxes.length > 0) {
      this.table.value.forEach((item, index) => {
        const checkbox = bodyCheckboxes[index];
        if (checkbox && !checkbox.disabled) {
          enabledItems.push(item);
        }
      });
    } else {
      // Return all if we can't determine disabled state
      return [...this.table.value];
    }

    return enabledItems;
  }

  private updateBodyCheckboxes() {
    const bodyCheckboxes = this.getBodyCheckboxes();
    
    bodyCheckboxes.forEach((checkbox, index) => {
      const item = this.table.value?.[index];
      if (!item) return;
      
      if (checkbox.disabled) {
        // Ensure disabled checkboxes are unchecked
        if (checkbox.checked) {
          checkbox.checked = false;
          checkbox.indeterminate = false;
        }
      } else {
        // Update enabled checkbox - let PrimeNG handle the visual update
        const isSelected = this.isItemSelected(item);
        if (checkbox.checked !== isSelected) {
          checkbox.checked = isSelected;
        }
      }
    });
  }

  private uncheckDisabledCheckboxes() {
    const bodyCheckboxes = this.getBodyCheckboxes();
    bodyCheckboxes.forEach(checkbox => {
      if (checkbox.disabled && checkbox.checked) {
        checkbox.checked = false;
        checkbox.indeterminate = false;
      }
    });
  }

  private cleanupDisabledItems() {
    if (!this.table.selection || !Array.isArray(this.table.selection) || this.table.selection.length === 0) {
      return;
    }

    const enabledItems = this.getEnabledItems();
    const validSelection = this.table.selection.filter(item => 
      enabledItems.some(enabledItem => this.itemsEqual(item, enabledItem))
    );

    if (validSelection.length !== this.table.selection.length) {
      this.table.selection = validSelection;
      if (this.table.selectionChange) {
        this.table.selectionChange.emit(validSelection);
      }
    }
  }

  private updateHeaderCheckboxState() {
    const headerCheckbox = this.getHeaderCheckbox();
    if (!headerCheckbox) return;

    // Ensure it's enabled
    headerCheckbox.disabled = false;
    
    // Check data and selection state
    const hasData = this.table.value && this.table.value.length > 0;
    const enabledItems = this.getEnabledItems();
    const selectedEnabledCount = enabledItems.filter(item => this.isItemSelected(item)).length;
    const enabledCount = enabledItems.length;

    // Determine visual state
    let newChecked = false;
    let newIndeterminate = false;
    
    if (!hasData || enabledCount === 0) {
      newChecked = false;
      newIndeterminate = false;
    } else if (selectedEnabledCount === 0) {
      newChecked = false;
      newIndeterminate = false;
    } else if (selectedEnabledCount === enabledCount) {
      newChecked = true;
      newIndeterminate = false;
    } else {
      newChecked = false;
      newIndeterminate = true;
    }

    // Apply state
    headerCheckbox.checked = newChecked;
    headerCheckbox.indeterminate = newIndeterminate;

    // Update visual wrapper
    const pCheckbox = headerCheckbox.closest('.p-checkbox');
    if (pCheckbox) {
      pCheckbox.classList.remove('p-checkbox-disabled', 'p-disabled');
      
      const box = pCheckbox.querySelector('.p-checkbox-box');
      if (box) {
        box.classList.remove('p-disabled');
        
        // Update highlight
        if (newChecked || newIndeterminate) {
          box.classList.add('p-highlight');
        } else {
          box.classList.remove('p-highlight');
        }
        
        // Update icon
        const icon = box.querySelector('.p-checkbox-icon');
        if (icon) {
          icon.className = 'p-checkbox-icon';
          
          if (newChecked) {
            icon.classList.add('pi', 'pi-check');
          } else if (newIndeterminate) {
            icon.classList.add('pi', 'pi-minus');
          } else {
            icon.classList.add('pi');
          }
        }
      }
    }
  }

  private isItemSelected(item: any): boolean {
    if (!this.table.selection) return false;
    
    if (Array.isArray(this.table.selection)) {
      return this.table.selection.some(selectedItem => 
        this.itemsEqual(item, selectedItem)
      );
    } else {
      return this.itemsEqual(item, this.table.selection);
    }
  }

  private getHeaderCheckbox(): HTMLInputElement | null {
    const selectors = [
      'thead p-tableheadercheckbox input[type="checkbox"]',
      'thead .p-selection-column input[type="checkbox"]',
      'thead .p-checkbox input[type="checkbox"]',
      'thead input[type="checkbox"][role="checkbox"]'
    ];

    for (const selector of selectors) {
      const element = this.element.nativeElement.querySelector(selector);
      if (element) return element as HTMLInputElement;
    }

    return null;
  }

  private getBodyCheckboxes(): HTMLInputElement[] {
    const selectors = [
      'tbody p-tablecheckbox input[type="checkbox"]',
      'tbody .p-selection-column input[type="checkbox"]',
      'tbody .p-checkbox input[type="checkbox"]',
      'tbody input[type="checkbox"][role="checkbox"]'
    ];

    for (const selector of selectors) {
      const elements = this.element.nativeElement.querySelectorAll(selector);
      if (elements.length > 0) {
        return Array.from(elements) as HTMLInputElement[];
      }
    }

    return [];
  }

  private itemsEqual(item1: any, item2: any): boolean {
    if (item1 === item2) return true;
    if (!item1 || !item2) return false;
    
    // Use dataKey if available
    if (this.table.dataKey) {
      const key1 = this.resolveFieldData(item1, this.table.dataKey);
      const key2 = this.resolveFieldData(item2, this.table.dataKey);
      if (key1 !== undefined && key2 !== undefined) {
        return key1 === key2;
      }
    }
    
    // Try common ID fields
    const idProps = ['id', 'ID', '_id', 'key', 'uuid', 'code'];
    for (const prop of idProps) {
      if (item1[prop] !== undefined && item2[prop] !== undefined) {
        return item1[prop] === item2[prop];
      }
    }
    
    return false;
  }

  private resolveFieldData(data: any, field: string): any {
    if (!data || !field) return undefined;
    
    if (field.indexOf('.') === -1) {
      return data[field];
    } else {
      const fields = field.split('.');
      let value = data;
      for (const f of fields) {
        if (value == null) return undefined;
        value = value[f];
      }
      return value;
    }
  }
}
