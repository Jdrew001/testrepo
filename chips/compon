import { Component } from '@angular/core';
import { BaseConfig, ChipConfig } from '../../../model';
import { BaseComponent } from '../base.component';

@Component({
  selector: 'cia-ng-chip',
  templateUrl: './ng-chip.component.html',
  styleUrls: ['./ng-chip.component.css']
})
export class NgChipComponent extends BaseComponent {
  // Preserve existing getters from the screenshot
  get config(): any { return this._strategy?.config as BaseConfig<ChipConfig>; }
  get control() { return this._strategy.control }
  get data() { return this._strategy.data; }
  get field() { return this.config?.field as any; }
  get disabled() { return this.config?.editable } 
  get className() { return this.config.className; }
  get customAttributes() { return this.config?.customAttributes; }
  get refData() { return this._strategy?.refData! }

  // Chip component specific properties
  isDropdownOpen: boolean = false;
  showOverlay: boolean = false;
  dropdownItems: any[] = [];
  inputValue: string = '';
  
  constructor() {
    super();
  }
  
  ngOnInit(): void {
    // Preserve existing initialization logic from screenshot
    if (this.config?.customAttributes?.selectAllRefData) {
      this._strategy.control.patchValue(this.refData);
    }
  }
  
  // Methods for chip functionality
  addItem(value: string): void {
    if (value && value.trim() && !this.disabled) {
      // Get current value array or initialize empty array
      const currentValues = Array.isArray(this.control.value) ? [...this.control.value] : [];
      
      // Only add if not already in the list
      if (!currentValues.includes(value.trim())) {
        currentValues.push(value.trim());
        this.control.patchValue(currentValues);
      }
      
      this.inputValue = '';
    }
  }
  
  removeItem(item: any): void {
    if (!this.disabled) {
      const currentValues = [...this.control.value];
      const index = currentValues.indexOf(item);
      
      if (index !== -1) {
        currentValues.splice(index, 1);
        this.control.patchValue(currentValues);
      }
    }
  }
  
  onKeyDown(event: KeyboardEvent): void {
    // Add on Enter or Tab
    if ((event.key === 'Enter' || event.key === 'Tab') && this.inputValue.trim()) {
      event.preventDefault();
      this.addItem(this.inputValue);
    }
    
    // Remove last item on Backspace if input is empty
    if (event.key === 'Backspace' && !this.inputValue && Array.isArray(this.control.value) && this.control.value.length > 0) {
      const currentValues = [...this.control.value];
      currentValues.pop();
      this.control.patchValue(currentValues);
    }
  }
  
  onInputFocus(): void {
    // Handle any focus-specific logic
  }
  
  onInputBlur(): void {
    // Add item on blur if there's a value
    if (this.inputValue.trim()) {
      this.addItem(this.inputValue);
    }
    
    // Close dropdown with a small delay to allow item selection
    setTimeout(() => {
      this.isDropdownOpen = false;
      this.showOverlay = false;
    }, 150);
  }
  
  toggleDropdown(event: Event): void {
    event.stopPropagation();
    this.isDropdownOpen = !this.isDropdownOpen;
    this.showOverlay = this.isDropdownOpen;
    
    // Load dropdown items from refData if available
    if (this.isDropdownOpen && this.refData) {
      this.dropdownItems = this.refData.filter(
        (item: any) => !this.control.value || !this.control.value.includes(item)
      );
    }
  }
  
  selectOption(option: any): void {
    this.addItem(option);
    this.isDropdownOpen = false;
    this.showOverlay = false;
  }
  
  closeOverlay(): void {
    this.isDropdownOpen = false;
    this.showOverlay = false;
  }
  
  // Method to clear all chips
  clearAll(): void {
    if (!this.disabled) {
      this.control.patchValue([]);
    }
  }
}