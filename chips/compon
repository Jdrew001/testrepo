import { Component } from '@angular/core';
import { BaseConfig, ChipConfig } from '../../../model';
import { BaseComponent } from '../base.component';

@Component({
  selector: 'cia-ng-chip',
  templateUrl: './ng-chip.component.html',
  styleUrls: ['./ng-chip.component.css']
})
export class NgChipComponent extends BaseComponent {
  // Keep the getters exactly as in the screenshot
  get config(): any { return this._strategy?.config as BaseConfig<ChipConfig>; }
  get control() { return this._strategy.control }
  get data() { return this._strategy.data; }
  get field() { return this.config?.field as any; }
  get disabled() { return this.config?.editable } 
  get className() { return this.config.className; }
  get customAttributes() { return this.config?.customAttributes; }
  get refData() { return this._strategy?.refData! }

  // Component state variables
  isDropdownOpen: boolean = false;
  showOverlay: boolean = false;
  inputValue: string = '';
  
  constructor() {
    super();
  }
  
  ngOnInit(): void {
    // Preserved from the screenshot
    if (this.config?.customAttributes?.selectAllRefData) {
      this._strategy.control.patchValue(this.refData);
    }
  }
  
  // Add an item (chip)
  add(value: string): void {
    if (value && value.trim()) {
      const currentValues = Array.isArray(this.control.value) ? [...this.control.value] : [];
      if (!currentValues.includes(value.trim())) {
        currentValues.push(value.trim());
        this.control.patchValue(currentValues);
      }
      this.inputValue = '';
    }
  }
  
  // Remove an item (chip)
  remove(value: string): void {
    const currentValues = Array.isArray(this.control.value) ? [...this.control.value] : [];
    const index = currentValues.indexOf(value);
    if (index > -1) {
      currentValues.splice(index, 1);
      this.control.patchValue(currentValues);
    }
  }
  
  // Handle keyboard events
  onKeyDown(event: KeyboardEvent): void {
    if ((event.key === 'Enter' || event.key === 'Tab') && this.inputValue.trim()) {
      event.preventDefault();
      this.add(this.inputValue);
    }
  }
  
  // Toggle dropdown menu
  toggleDropdown(event: Event): void {
    event.stopPropagation();
    this.isDropdownOpen = !this.isDropdownOpen;
    this.showOverlay = this.isDropdownOpen;
  }
  
  // Close dropdown and overlay
  closeDropdown(): void {
    this.isDropdownOpen = false;
    this.showOverlay = false;
  }
  
  // Select an item from dropdown
  selectFromDropdown(value: string): void {
    this.add(value);
    this.closeDropdown();
  }
  
  // Clear all chips
  clearAll(): void {
    this.control.patchValue([]);
  }
}