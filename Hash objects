/**
 * A utility function that creates a deterministic hash from any JavaScript object
 * without relying on external dependencies.
 * 
 * @param obj - The object to hash
 * @param algorithm - Hashing algorithm to use (default: 'SHA-256')
 * @returns A promise that resolves to the hash as a hex string
 */
export async function hashObject(
  obj: any, 
  algorithm: 'SHA-1' | 'SHA-256' | 'SHA-384' | 'SHA-512' = 'SHA-256'
): Promise<string> {
  // Convert the object to a stable string representation
  const stringRepresentation = stableStringify(obj);
  
  // Convert string to Uint8Array
  const encoder = new TextEncoder();
  const data = encoder.encode(stringRepresentation);
  
  // Use the Web Crypto API to hash the data
  const hashBuffer = await crypto.subtle.digest(algorithm, data);
  
  // Convert the hash to a hex string
  return arrayBufferToHex(hashBuffer);
}

/**
 * Creates a deterministic string representation of any JavaScript object.
 * This ensures the same object always produces the same string representation.
 * 
 * @param obj - The object to stringify
 * @returns A stable string representation of the object
 */
function stableStringify(obj: any): string {
  // Handle primitive types directly
  if (obj === null || obj === undefined) return String(obj);
  if (typeof obj !== 'object') return String(obj);
  
  // Handle arrays by recursively stringifying each element
  if (Array.isArray(obj)) {
    return '[' + obj.map(item => stableStringify(item)).join(',') + ']';
  }
  
  // Handle regular objects by sorting keys and recursively stringifying values
  const keys = Object.keys(obj).sort();
  const pairs = keys.map(key => {
    const keyString = JSON.stringify(key);
    const valueString = stableStringify(obj[key]);
    return keyString + ':' + valueString;
  });
  
  return '{' + pairs.join(',') + '}';
}

/**
 * Convert an ArrayBuffer to a hexadecimal string.
 * 
 * @param buffer - The ArrayBuffer to convert
 * @returns A hexadecimal string representation of the buffer
 */
function arrayBufferToHex(buffer: ArrayBuffer): string {
  const bytes = new Uint8Array(buffer);
  return Array.from(bytes)
    .map(byte => byte.toString(16).padStart(2, '0'))
    .join('');
}

// Usage example:
async function example() {
  const obj1 = { b: 2, a: 1, c: [3, 2, 1] };
  const obj2 = { a: 1, b: 2, c: [3, 2, 1] };
  const obj3 = { a: 1, b: 2, c: [1, 2, 3] };
  
  console.log(await hashObject(obj1)); // Same hash as obj2
  console.log(await hashObject(obj2)); // Same hash as obj1
  console.log(await hashObject(obj3)); // Different hash
}
